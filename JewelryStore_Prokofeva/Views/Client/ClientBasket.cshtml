


<div>
    <h1>Корзина</h1>
    <h1>Корзина</h1>
    <h1>Корзина</h1>
    <h1>Корзина</h1>
    <h1>Корзина</h1>

</div>


@model JewelryStore_Prokofeva.Models.CartViewModel

@{
    ViewData["Title"] = "Корзина";

}

<div class="container">

    @Html.AntiForgeryToken()
    <h1>Корзина</h1>
    <!-- Общий контейнер для cart-items и payment-summary -->
    <div class="cart-summary-container">
        <!-- Блок с товарами в корзине -->
        <div class="cart-items">
            @foreach (var item in Model.CartItems)
            {
                <div class="cart-item" data-id="@item.Id">
                    <div class="cart-item-photo">
                        <img src="@item.PhotoUrl" alt="@item.ProductTitle" />
                    </div>
                    <div class="cart-item-details">
                        <h2>@item.ProductTitle</h2>
                        <p>Размер: @item.Size</p>
                        <p>Статус: <span class="cart-item-status">@item.Status</span></p> <!-- Обернули статус в span с классом -->
                        <p>ID товара: @item.Id</p> <!-- Display Cart Item ID -->
                        <button class="btn-update-status" onclick="updateCartItemStatus(@item.Id, 'Обновлено')">Обновить</button>



                    </div>
                    <div class="cart-item-price">
                        @if (item.Discount != null)
                        {
                            <p>Старая цена: <span class="old-price">@item.OriginalPrice</span></p>
                            <p>Цена со скидкой: <span class="discount-price">@item.DiscountPrice</span></p>
                            <p>Скидка: <span class="discount">@item.Discount%</span></p>
                        }
                        else
                        {
                            <p>Цена: <span class="current-price">@item.OriginalPrice</span></p>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Блок оплаты -->
        <div class="payment-summary">
            <h2>Итого к оплате</h2>
            <p>Товары: <span id="total-items-count">@Model.CartItems.Count()</span></p>
            <p>Общая сумма (оригинальная цена): <span id="total-original-price">@Model.TotalOriginalPrice</span></p>
            <p>Общая сумма (цена со скидкой): <span id="total-discount-price">@Model.TotalDiscountPrice</span></p>
            <p>Общая скидка: <span id="total-discount">@Model.TotalDiscount</span></p>
            <button class="btn-pay">Оплатить</button>
        </div>
    </div>
</div>


<script>
         async function updateCartItemStatus(id, status) {
             console.log(`updateCartItemStatus вызвана с id=${id}, status=${status}`); // Проверка вызова функции
        const response = await fetch(`https://localhost:7202/api/CartItem/${id}/status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ status }) // Передаем статус в теле запроса
        });

        if (response.ok) {
                alert('Статус успешно обновлен');
                location.reload(); // Перезагрузить страницу, чтобы обновить данные
            } else {
                const errorText = await response.text();
                alert('Ошибка при обновлении статуса: ' + errorText);
            }
        } catch (error) {
            alert('Ошибка сети: ' + error.message);
        }
    }
</script>

<style>
    .container {
        width: 100%;
        margin: 0 auto;
        font-family: Arial, sans-serif;
    }

    .cart-summary-container {
        display: flex;
        width: 100%;
        margin-bottom: 20px;
    }

    .cart-items {
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
        flex: 7; /* Занимает 7/10 доступного пространства */
        margin-right: 20px;
    }

    .payment-summary {
        border: 1px solid #007bff;
        padding: 20px;
        border-radius: 8px;
        background-color: #f8f9fa;
        flex: 3; /* Занимает 3/10 доступного пространства */
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }

    .cart-item-photo img {
        width: 100px;
        height: auto;
    }

    .cart-item-details {
        flex: 1;
        padding: 0 10px;
    }

    .cart-item-price {
        text-align: right;
    }

    .old-price {
        text-decoration: line-through;
        color: gray;
    }

    .discount-price {
        color: green;
        font-weight: bold;
    }

    .current-price {
        color: black;
        font-weight: bold;
    }

    .btn-remove {
        background-color: #dc3545;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-remove:hover {
            background-color: #c82333;
        }

    .btn-pay {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-pay:hover {
            background-color: #0056b3;
        }
</style>








